pipeline {
    agent any
    tools {
        nodejs 'node'
    }
    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/Megaax/mock-user-auth.git'
            }
        }
       
       
        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'Sonar-Scanner';
                    withSonarQubeEnv() {
                        sh "${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=mock-auth "
                    }
                }
            }
        }
        stage('TRIVY SCAN') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }
         stage('Build') {
            steps {
                sh "npm run build"
            }
        }
     
        stage('Test') {
            steps {
                script {
                    def testFailed = sh(script: 'npm test', returnStatus: true) != 0
                    if (testFailed) {
                        echo "Tests failed! Reverting to the last commit..."
                        sh 'git checkout master'
                        sh 'git reset --hard HEAD^' // Revert to the last commit
                    }
                    sh "cat /var/lib/jenkins/workspace/pipeline-1/html-report/report.html > test_report.txt"

                }
            }
        }
stage('Build & Push docker image') {
    steps {
        script {
            withCredentials([usernamePassword(credentialsId: 'docker-cred', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                sh "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD"

                sh "docker build -t mohamedmagdykhamis/mock-auth ."

                sh "docker push mohamedmagdykhamis/mock-auth"

            }
        }
    }
}

        stage("TRIVY Image Scan"){
            steps{
                sh "trivy image mohamedmagdykhamis/mock-auth:latest > trivyimage.txt" 
            }
        }

       stage('Upload Artifacts to Nexus') {
    steps {
       withCredentials([file(credentialsId: 'npmrc-demo', variable: 'npmcred')]) {
           sh 'npm publish --userconfig $npmcred --loglevel verbose'

        }
    }
}
        stage('Deploy with Ansible') {
            steps {
            withCredentials([usernamePassword(credentialsId: 'docker-cred', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
            sh "ansible-playbook --extra-vars 'docker_username=${DOCKER_USERNAME} docker_password=${DOCKER_PASSWORD}' /var/lib/jenkins/workspace/pipeline-1/Playbooks/deployment.yml"
        }
            }
        }
    }
    post {
        failure {
            script {
                echo "Pipeline failed! Reverting to the last commit..."
                sh 'git checkout master'
                sh 'git reset --hard HEAD^' // Revert to the last commit
            }
        }
        always {
        emailext attachLog: true,
            subject: "'${currentBuild.result}'",
            body: "Project: ${env.JOB_NAME}<br/>" +
                "Build Number: ${env.BUILD_NUMBER}<br/>" +
                "URL: ${env.BUILD_URL}<br/>",
            to: 'mohamedxmagdi@gmail.com',                              
            attachmentsPattern: 'trivyfs.txt,trivyimage.txt'
        }
    }

}
